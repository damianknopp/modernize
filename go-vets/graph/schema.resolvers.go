package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"dmknopp/go-vets-graphql/graph/model"
	"fmt"
	"sort"
	"strconv"
)

// UpsertVet is the resolver for the upsertVet field.
func (r *mutationResolver) UpsertVet(ctx context.Context, input model.VetInput) (*model.Vet, error) {
	n := len(r.Resolver.VetStore)
	if n == 0 {
		r.Resolver.VetStore = make(map[string]model.Vet)
	}

	id := input.ID
	var vet model.Vet
	vet.FirstName = input.FirstName
	vet.LastName = input.LastName
	specialties := []*model.Specialty{}
	for _, specialtyInput := range input.Specialties {
		specialties = append(specialties, (*model.Specialty)(specialtyInput))
	}
	vet.Specialties = specialties

	if id != nil {
		_, ok := r.Resolver.VetStore[*id]
		if !ok {
			return nil, fmt.Errorf("not found")
		}
		r.Resolver.VetStore[*id] = vet
	} else {
		// generate unique id
		nid := strconv.Itoa(n + 1)
		vet.ID = nid
		r.Resolver.VetStore[nid] = vet
	}

	return &vet, nil
}

// Vet is the resolver for the vet field.
func (r *queryResolver) FindVetByID(ctx context.Context, id string) (*model.Vet, error) {
	n := len(r.Resolver.VetStore)
	if n == 0 {
		r.Resolver.VetStore = make(map[string]model.Vet)
	}

	if &id == nil {
		return nil, fmt.Errorf("please supply an id")
	}

	vet, ok := r.Resolver.VetStore[id]
	if !ok {
		return nil, fmt.Errorf("not found")
	} else {
		return &vet, nil
	}
}

// Vets is the resolver for the vets field.
func (r *queryResolver) FindAllVets(ctx context.Context) ([]*model.Vet, error) {
	n := len(r.Resolver.VetStore)
	if n == 0 {
		r.Resolver.VetStore = make(map[string]model.Vet)
	}

	vets := make([]*model.Vet, 0)
	for k, _ := range r.Resolver.VetStore {
		vet := r.Resolver.VetStore[k]
		vets = append(vets, &vet)
	}

	sort.Slice(vets, func(i, j int) bool {
		return vets[i].ID < vets[j].ID
	})
	return vets, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
